; ==============================================================
; --------------------------------------------------------------
; MD Platformer Core
;
;   by Mega Drive Developers Collective
;      AURORA FIELDS 2020/12
;
;   VDP macros and equates
; --------------------------------------------------------------

VDP_Data =		$C00000					; VDP data port
VDP_Control =		$C00004					; VDP control port
VDP_Counter =		$C00008					; VDP H/V counter port
VDP_PSG =		$C00011					; PSG command port
VDP_BANK =		$20000					; size of a single DMA bank
; ==============================================================
; --------------------------------------------------------------
; Include a file safely while aligning it to a DMA bnak
;
;   path =	path of the file to incbin
;   start =	optional start offset of the file to read from
;   length =	optional length of the file to read from
; --------------------------------------------------------------

incdma		macro label, path, start, length
	local check						; this will determine the check for alignment

	if strlen("\length") > 0				; check if start was provided
check =		\length						; use the length parameter

	elseif strlen("\start") > 0				; check if start was provided
check =		filesize(\path)-\start				; use the filesize after start bytes

	else
check =		filesize(\path)					; use the filesize of the file
	endif

	if check > VDP_BANK					; this can not be aligned, just warn user
		inform 1,"Warning, DMA art is too large to fit within VDP bank."
		align	$20					; hope this alignment helps

	elseif (offset(*) & ($1000000-VDP_BANK)) <> ((offset(*) + check) & ($1000000-VDP_BANK))
		align	VDP_BANK				; does not fit, align to next VDP bank
	endif

\label:
	if narg=2						; I hate this so much
		incbin \path					; include file
	elseif narg=3
		incbin \path, \start				; include file
	else
		incbin \path, \start, \length			; include file
	endif
	endm

; ==============================================================
; --------------------------------------------------------------
; VDP command generator
;
;   ins =	instruction to use for this vdp write
;   addr =	destination VRAM/CRAM/VSRAM address
;   type =	destination type: VRAM, CRAM or VSRAM
;   rwd =	operation type: READ, WRITE or DMA
;
; if no end & end2 >
;   end =	not used (for example if you want to use with dc.l)
;   end2 =	not used
;
; if no end2 >
;   end =	the destination for command data (not required, for example for dc.l)
;   end2 =	not used
;
; if end2 >
;   end =	can be used to modify the generated value (such as shift)
;   end2 =	the destination for command data
; --------------------------------------------------------------

vdp			macro ins,addr,type,rwd,end,end2
	if narg=5
		\ins #(((\type&\rwd)&3) << 30) | (((\addr)&$3FFF) << 16) | (((\type&\rwd)&$FC) << 2) | (((\addr)&$C000) >> 14), \end

	elseif narg=6
		\ins #(((\type&\rwd)&3) << 30) | (((\addr)&$3FFF) << 16) | (((\type&\rwd)&$FC) << 2) | (((\addr)&$C000) >> 14)\end, \end2

	else
		\ins (((\type&\rwd)&3) << 30) | (((\addr)&$3FFF) << 16) | (((\type&\rwd)&$FC) << 2) | (((\addr)&$C000) >> 14)
	endif
	endm
; ==============================================================
; --------------------------------------------------------------
; VDP command argument types
; --------------------------------------------------------------

; values for the "type" argument
VRAM =			$21					; VRAM OP
CRAM =			$2B					; CRAM OP
VSRAM =			$25					; VSRAM OP

; values for the "rwd" argument
READ =			$0C					; VDP READ
WRITE =			$07					; VDP WRITE
WDMA =			$27					; VDP DMA
; ==============================================================
; --------------------------------------------------------------
; VDP command to DMA stuff from ROM/RAM to VDP
;
;   source =	the 68000 data to start DMA from
;   dest =	destination address in VRAM
;   length =	length of the DMA
;   type =	destination type: VRAM, CRAM or VSRAM
; --------------------------------------------------------------

dma			macro source,dest,length,type
		move.l	#$94009300|((((\length)>>1)&$FF00)<<8)|(((\length)>>1)&$FF),(a6)
		move.l	#$96009500|((((\source)>>1)&$FF00)<<8)|(((\source)>>1)&$FF),(a6)
		move.w	#$9700|(((\source)>>17)&$7F),(a6)
	vdp	move.l,\dest,\type,WDMA,(a6)			; start a DMA
	endm
; ==============================================================
; --------------------------------------------------------------
; VDP command to fill VRAM with a specific word
;
;   fill =	the word to fill VRAM with
;   dest =	destination address in VRAM
;   length =	length of the DMA
;   wait =	if 1, the code waits until DMA ends
; --------------------------------------------------------------

vdpfill		macro fill,dest,length,wait
		move.l	#$8F019400|((((\length)-1)&$FF00)>>8),(a6)
		move.l	#$97809300|(((\length)-1)&$FF),(a6)
	vdp	move.l,\dest,VRAM,WDMA,(a6)			; start a fill
		move.w	#\fill,-4(a6)				; fill with this

	if \wait
.wait\@
		move	(a6),ccr				; check if DMA is taking place
		bvs.s	.wait\@					; if yes, branch
		move.w	#$8F02,(a6)				; restore the autoincrement
	endif
	endm
; ==============================================================
; --------------------------------------------------------------
; VDP command to copy memory
;
;   source =	the VRAM address to start DMA from
;   dest =	destination address in VRAM
;   length =	length of the DMA
;   type =	destination type: VRAM, CRAM or VSRAM
;   wait =	if 1, the code waits until DMA ends
; --------------------------------------------------------------

vdpcopy			macro source,dest,length,type,wait
		move.l	#$94009400|((((\length)>>1)&$FF00)<<8)|(((\length)>>1)&$FF),(a6)
		move.l	#$96009500|((((\source)>>1)&$FF00)<<8)|(((\source)>>1)&$FF),(a6)
		move.w	#$97C0,(a6)
	vdp	move.l,\dest,\type,WDMA,(a6)			; start a fill
		move.w	#\fill,-4(a6)				; fill with this

	if \wait
.wait\@
		move	(a6),ccr				; check if DMA is taking place
		bvs.s	.wait\@					; if yes, branch
		move.w	#$8F02,(a6)				; restore the autoincrement
	endif
	endm
