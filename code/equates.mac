; ==============================================================
; --------------------------------------------------------------
; MD Platformer Core
;
;   by Mega Drive Developers Collective
;      AURORA FIELDS 2020/12
;
;   Main equates and RAM mappings file
; --------------------------------------------------------------

; ==============================================================
; --------------------------------------------------------------
; Assembly equates
; --------------------------------------------------------------

DEBUG			EQU 1					; If 1, enables assembling debugging code
SAFE			EQU 1					; If 1, enables assembly safety checks in code. Much slower.
SOUND			EQU 1					; If 1, enables sound driver.

SAFE_DMA		EQU 1					; if 1, enables DMA boundary cross check to allow safe dma from any ROM address
PAD_ENABLE_MULTI	EQU 1					; enable multitap (Team Player) and EA 4-way play.
PAD_ENABLE_MOUSE	EQU 1					; enable mouse read support
; ==============================================================
; --------------------------------------------------------------
; Decompression and DMA equates
; --------------------------------------------------------------

dmaqueueentries =	$10					; how many separate DMA queue entries to have
kosqueueentries =	$04					; númber of kosinski queue entries
kosmqueueentries =	$0C					; númber of kosinski moduled queue entries

kosuselut = 		1					; use a look up table for dealing with inverted bit order
kosunroll = 		3					; how many times to unroll data copy loops (0-3)
kosunrollextreme =	1					; if enabled, faster but larger version will be used
; ==============================================================
; --------------------------------------------------------------
; Level data equates
; --------------------------------------------------------------

levelmaxobj =		$300					; max number of objects per level
objcount =		$40					; max number of objects
dislayercount =		6					; number of distinct display layers
platformcount =		$20					; number of platform objects
touchcount =		$20					; number of touch objects
dyncount =		$20					; number of dynamic art objects

dynallocdelta =		$100/$40				; amount of frames until VRAM must be refactored
dynallocsize =		4					; number of tiles to allocate for every bit of alloc table
dynalloctiles =		$180					; number of tiles for dynamic allocator
dynallocbits =		dynalloctiles / dynallocsize		; number of bits for dynamic allocator
dynallocbytes =		((dynallocbits / 8 + 1) + 1) & $FFE	; number of bytes for dynamic allocator (next even value)

	if dynallocbits >= $100					; check if there are too many bits for allocator to work
		inform 3,"Too many tiles reserved for dynamic allocator!"; display error message
	endif
; ==============================================================
; --------------------------------------------------------------
; Object equates
; --------------------------------------------------------------

_gravity =		$38					; object gravity constant

	rsset 0
arg			rs.b 0					; object argument variable
ptr			rs.l 1					; pointer to object code
prev			rs.w 1					; pointer to the previous object in linked list
next			rs.w 1					; pointer to the next object in linked list
dnext			rs.w 1					; pointer to the next object in display list
dprev			rs.w 1					; pointer to the previous object in display list
plat			rs.w 1					; pointer to the platform object data. Positive values indicate nothing is loaded
touch			rs.w 1					; pointer to the touch object data. Positive values indicate nothing is loaded
dyn			rs.w 1					; pointer to the dynamic art data. Positive values indicate nothing is loaded
resp			rs.w 1					; pointer to the respawn data. Positive values indicate nothing is loaded
flags			rs.w 1					; object flags bitfields
xpos			rs.l 1					; object x-position in 16.8 fixed point format
width =			__rs-1					; object display width in pixels
ypos			rs.l 1					; object y-position in 16.8 fixed point format
height =		__rs-1					; object display height in pixels
xvel			rs.w 1					; object x-velocity
yvel			rs.w 1					; object y-velocity
frame			rs.b 0					; current display frame
map			rs.l 1					; object mappings address
tile			rs.w 1					; VRAM tile and settings
act			rs.b 1					; actor routine counter
subact			rs.b 1					; actor subroutine counter

; these are only used if the object uses animations
anispeed		rs.w 1					; animation speed in 8.8 fixed point format. This is the amount of map frames per tv frame
aniacc			rs.b 1					; animation accumulator low byte, used to make speed more dynamic
anioff			rs.b 1					; offset in the animation script
ani			rs.b 1					; animation ID

exram			rs.b $21				; extra RAM the object may use for whatever
size			rs.w 0					; size of object
; ==============================================================
; --------------------------------------------------------------
; Object equate flags
; --------------------------------------------------------------

	rsset 8		; byte 0
singlesprite		rs.b 1					; set if object displays only a single sprite. Used for some special objects
norender		rs.b 1					; set if object should not render sprites. This is an ugly hack to work around dynamic rendering issues
xflip			rs.b 1					; set if object is x-flipped
yflip			rs.b 1					; set if object is y-flipped
			rs.b 3					; unused
onscreen		rs.b 1					; set if object was displayed last frame

	rsset 0		; byte 1
			rs.b 8					; unused
; ==============================================================
; --------------------------------------------------------------
; Display layer equates
; --------------------------------------------------------------

	rsset dprev-6						; this awkward thing will make ddprev == dprev
ddnext			rs.w 1					; pointer to first display object in linked list
ddn2			rs.w 1					; must be 0
ddn1			rs.w 1					; must be 0
ddprev			rs.w 1					; pointer to last display object in linked list
ddsize =		__rs-ddnext				; size of display layer
; ==============================================================
; --------------------------------------------------------------
; Platform object equates
; --------------------------------------------------------------

	rsset 0
			rs.w 1					; pointer to parent object. 0 means this slot is free
pwidth			rs.b 1					; platform collision width in pixels
pheight			rs.b 1					; platform collision height in pixels
pflags			rs.b 0					; platform flags bitfield
pmap			rs.l 1					; pointer to collision height mappings
psize			rs.w 0					; size of platform object
; ==============================================================
; --------------------------------------------------------------
; Platform object equate flags
; --------------------------------------------------------------

	rsset 0
pstandp1		rs.b 1					; Player 1 is standing on object
pstandp2		rs.b 1					; Player 2 is standing on object
ppushp1			rs.b 1					; Player 1 is pushing the object
ppushp2			rs.b 1					; Player 2 is pushing the object
ptop			rs.b 1					; if set, platform has solidity on the top
plrb			rs.b 1					; if set, platform has solidity on left, right and bottom
			rs.b 1					; unused
pactive			rs.b 1					; set to 1 if active
; ==============================================================
; --------------------------------------------------------------
; Touch object equates
; --------------------------------------------------------------

	rsset 0
			rs.w 1					; pointer to parent object. 0 means this slot is free
twidth			rs.b 1					; touch collision width in pixels
theight			rs.b 1					; touch collision height in pixels
tflags			rs.b 1					; flags for touch object
textra			rs.b 1					; extra flags
tsize			rs.w 0					; size of touch object
; ==============================================================
; --------------------------------------------------------------
; Touch object flags
; --------------------------------------------------------------

	rsset 0
			rs.b 8					; unused
; ==============================================================
; --------------------------------------------------------------
; Dynamic art object equates
; --------------------------------------------------------------

	rsset 0
			rs.w 1					; pointer to parent object. 0 means this slot is free
dlast			rs.b 0					; last frame number
dart			rs.l 1					; pointer to art data
dwidth			rs.b 0					; amount of VRAM to be reserved
dmap			rs.l 1					; pointer to dynamic art mappings
dbit			rs.b 1					; starting bit of allocation
dsize			rs.w 0					; size of dynamic art object
; ==============================================================
; --------------------------------------------------------------
; RAM equate table
; --------------------------------------------------------------

RAMMAP		SECTION org($FFFF0000), size($10000), bss	; create RAM section from FF0000 to FFFFFF
StartOfRAM		ds.b $7F00				; idk what it would be used for
Hint			ds.w 10					; horizontal interrupt code
			ds.w $80				; stack contents
Stack			ds.w 0					; the bottom of stack data
Vint			ds.w 3					; vertical interrupt handler code

VscrollTable		ds.l 20					; vscroll data table
HscrollTable		ds.l 224				; hscroll data table
SpriteTable		ds.l 80*2				; sprite data table

kosmBuffer		ds.b $1000				; kosinski module decompression buffer. Used to DMA kosm data
kosRegisters		ds.w (3*2)+7				; stored kosinski decompression registers
kosSR			ds.w 1					; stored kosinski decompression SR
kosRoutine		ds.l 1					; stored kosinski decompression address, code jumps here if decompression was interrupted

kosmQueueLeft		ds.b 1					; number of items left to decompress in the kosinski moduled queue. bit7 indicates that decompression is in progress
kosQueueLeft		ds.b 1					; number of items left to decompress in the kosinski queue. bit7 indicates that decompression is in progress
kosQueue		ds.l 2*kosqueueentries			; kosinski decompression queue ata
kosQueueSource		equ kosQueue				; source address for the compressed data
kosQueueDest		equ kosQueue+4				; destination address for the decompressed data

kosmLastSize		ds.w 1					; size of the last kosinski module in the current archive
kosmQueue		ds.w 3*kosmqueueentries			; kosinski moduled decompression queue data
kosmQueueSource		equ kosmQueue				; source address for the compressed data
kosmQueueDest		equ kosmQueue+4				; destination VRAM address for the decompressed data

RespawnList		ds.w levelmaxobj/2			; max number of objects per level
ObjList			ds.b objcount * size			; the RAM for every object
ObjListEnd		ds.w 0					; end of object list

TailPtr			ds.l 1					; pointer to tail object code
TailPrev		ds.w 1					; pointer to the last object in linked list
TailNext		ds.w 1					; pointer to the first object in linked list
FreeHead		ds.w 1					; pointer to the first object that is not loaded
RenderList		ds.l 1					; address to a list of render routines
DisplayList		equ *-ddnext
			ds.b dislayercount * ddsize		; the RAM for every display layer data
PlatformList		ds.b platformcount * psize		; the RAM for every platform object data
TouchList		ds.b touchcount * tsize			; the RAM for every touch object data
DartList		ds.b dyncount * dsize			; the RAM for every touch object data

DMAQueueBuf		ds.w dmaqueueentries * 7		; DMA queue buffer
DMAQueueAddr		ds.w 1					; address of the next free DMA queue slot (must be at the end of queue)
DynAllocTable		ds.b dynallocbytes			; the RAM for all the bits needed for dynamic allocator
DynAllocTimer		ds.b 1					; timer for refactoring dynamic allocations

Gamemode		ds.b 1					; the current game mode
VintCount		ds.l 1					; number of vertical interrupts so far
VintRoutine		ds.b 1					; vertical interrupt routine

CameraX			ds.l 1					; camera x-position
CameraY			ds.l 1					; camera y-position


	if PAD_ENABLE_MULTI
pStats1			ds.w 0					; stats for pad 1
pHeld1A			ds.w 1					; held buttons for controller 1A
pPress1A		ds.w 1					; pressed buttons for controller 1A
pHeld1B			ds.w 1					; held buttons for controller 1B
pPress1B		ds.w 1					; pressed buttons for controller 1B
pHeld1C			ds.w 1					; held buttons for controller 1C
pPress1C		ds.w 1					; pressed buttons for controller 1C
pHeld1D			ds.w 1					; held buttons for controller 1D
pPress1D		ds.w 1					; pressed buttons for controller 1D

pStats2			ds.w 0					; stats for pad 2
pHeld2A			ds.w 1					; held buttons for controller 2A
pPress2A		ds.w 1					; pressed buttons for controller 2A
pHeld2B			ds.w 1					; held buttons for controller 2B
pPress2B		ds.w 1					; pressed buttons for controller 2B
pHeld2C			ds.w 1					; held buttons for controller 2C
pPress2C		ds.w 1					; pressed buttons for controller 2C
pHeld2D			ds.w 1					; held buttons for controller 2D
pPress2D		ds.w 1					; pressed buttons for controller 2D

pMode1			ds.b 1					; pad 1 mode (0 = 3-button, 1 = 6-button, 2 = mouse, 3 = empty, $80 = multitap, $EA = EA 4-way play)
pMode2			ds.b 1					; pad 2 mode (0 = 3-button, 1 = 6-button, 2 = mouse, 3 = empty, $80 = multitap, $EA = EA 4-way play)
pMulti1			ds.b 1					; pad 1 multitap types (2b per pad, 00 = 3-button, 01 = 6-button, 10 = mouse, 11 = empty)
pMulti2			ds.b 1					; pad 2 multitap types (2b per pad, 00 = 3-button, 01 = 6-button, 10 = mouse, 11 = empty)
pPoll			ds.b 1					; if set, polls controllers instead of doing controller input

	else
pHeld1A			ds.w 1					; held buttons for controller 1
pPress1A		ds.w 1					; pressed buttons for controller 1
pHeld2A			ds.w 1					; held buttons for controller 2
pPress2A		ds.w 1					; pressed buttons for controller 2

pMode1			ds.b 1					; pad 1 mode (0 = 3-button, 1 = 6-button, 2 = mouse, 3 = empty)
pMode2			ds.b 1					; pad 2 mode (0 = 3-button, 1 = 6-button, 2 = mouse, 3 = empty)
pPoll			ds.b 1					; if set, polls controllers instead of doing controller input
	endif
; ==============================================================
; --------------------------------------------------------------
; Exception macro
; --------------------------------------------------------------

exception		macro id
		trap	#15					; run error debugger
		dc.w	\id					; include exception ID
	endm
; ==============================================================
; --------------------------------------------------------------
; Exception list
; --------------------------------------------------------------

	rsset 0
exChecksum		rs.w 1					; exception when checksum fails
exCreatePlat		rs.w 1					; exception when there are too many platforms
exCreateTouch		rs.w 1					; exception when there are too many touch objects
exCreateDynArt		rs.w 1					; exception when there are too many dynamic art objects
exCreateObj		rs.w 1					; exception when an important object failed to load
exNoDebug		rs.w 1					; exception when DEBUG flag is off
exFullDMA		rs.w 1					; exception when DMA queue is full
exAddKosm		rs.w 1					; exception when there is no free kosinski moduled queue slots
exAddKos		rs.w 1					; exception when there is no free kosinski queue slots
; ==============================================================
; --------------------------------------------------------------
; Kosinski module list macro
;
; macro arguments:
;   vram =	VRAM target address of the data
;   addr =	Source address of the kosinski module data
; --------------------------------------------------------------

kosmEntry		macro vram, addr
		dc.l \addr
		dc.w \vram
	endm
